#! /bin/bash

function print_usage(){
cat << EOF
Usage: live-edit [-f <makefile>] [<FILE>]

Edit a file and run 'make update' on writes.

This script is useful for editing document source files, such as LaTeX or Markdown, that must be compiled into a document.
It opens the file in $EDITOR and then uses the 'entr' command to run 'make update' when the file changes.

All you need to do is provide a 'Makefile' with an 'update' target that produces the document.

Options:
      -f --makefile FILE Use FILE instead of default makefile.

EOF

}


# the getopt command is external to the shell. essentially what it
# does is parse the command line parameters and rearrange them so
# that all of the options are given before any of the arguments, and
# adds a '--' between the options and arguments. 
# then you can setup a while loop to process options easily and terminate
# it when you run into the '--'

# both long and short options can be given
# short options are passed to -o
# long  options are passed to -l
# a colon (:) after an option means it has a required argument
# two colons (::) after an option means it has a optional argument


NEW_COMMAND_LINE=$(getopt -o hf: -l help,makefile: -n '$(basename $0)' -- "$@")   # this creates a rearranged version of the command line
if [ $? != 0 ] ; then echo "getopt returned an error, Terminating..." >&2 ; exit 1 ; fi
eval set -- "$NEW_COMMAND_LINE"                                                                          # this sets up positional parameters to the new command line


# now we can just manually loop through the positional parameters
makefile="Makefile"
while true ; do
  case "$1" in
    -h|--help )
      print_usage
      exit 1
      shift 1
      ;;
    -f|--makefile )
        makefile=$2
        shift 2
        ;;
    --) shift ; break ;;
     *) echo "Unreconized option got through: '$1'" ; exit 1 ;;
  esac
done

# arguments start at $1...



if [ ! -e $makefile ] 
then
  echo "no Makefile found. Please provide a Makefile with an 'update' target."
  exit 1
fi

if [ -n $EDITOR ]
then
  export EDITOR=vim
fi

file=${1}

# touch the file so to make sure it exists
touch $file
# open $EDITOR in background subshell
$EDITOR $file &
# get the pid for the editor process
editPID=$!

# setup entr to run 'make update' if the file we are
# editing is modified. also run in the background.
find ./ -name $file | entr sh -c "make -f ${makefile} INFILE=${file} update >/dev/null " &
# get the pid for the entr process
entrPID=$!

# wait until the editor process is killed (like when the user quits)
wait $editPID
# kill the entr process
kill $entrPID

# cleanup the terminal
reset
